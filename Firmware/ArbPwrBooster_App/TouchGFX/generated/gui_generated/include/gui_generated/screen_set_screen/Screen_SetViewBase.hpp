/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN_SETVIEWBASE_HPP
#define SCREEN_SETVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen_set_screen/Screen_SetPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class Screen_SetViewBase : public touchgfx::View<Screen_SetPresenter>
{
public:
    Screen_SetViewBase();
    virtual ~Screen_SetViewBase();
    virtual void setupScreen();
    virtual void transitionBegins();

    /*
     * Virtual Action Handlers
     */
    virtual void update_Screen_Set()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void enableCurrentLimit()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void disableCurrentLimit()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void setIntegerToUpdate()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void setTenthsToUpdate()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void setHundredthsToUpdate()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void setThousandthsToUpdate()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void incrementDigitUp()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void incrementDigitDown()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void resetMinMaxCurrentLimits()
    {
        // Override and implement this function in Screen_Set
    }
    virtual void updateConfigFile()
    {
        // Override and implement this function in Screen_Set
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::TextArea textArea_ResetMinMax;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  flexButton_ResetMinMax;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  flexButton_Home;
    touchgfx::TextArea textArea_EnableLimit;
    touchgfx::TextArea textArea_Units;
    touchgfx::RadioButtonGroup<1> radioButtonGroup1;
    touchgfx::RadioButton radioButton_EnableLimit;
    touchgfx::TextArea textArea_DecimalPoint;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton_AmpsDigit_3;
    touchgfx::TextAreaWithOneWildcard textArea_AmpsDigit_3;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton_AmpsDigit_2;
    touchgfx::TextAreaWithOneWildcard textArea_AmpsDigit_2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton_AmpsDigit_1;
    touchgfx::TextAreaWithOneWildcard textArea_AmpsDigit_1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton_AmpsDigit_0;
    touchgfx::TextAreaWithOneWildcard textArea_AmpsDigit_0;
    touchgfx::TextArea textArea_CH_ToSet;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  flexButton_DigitDown;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  flexButton_DigitUp;
    touchgfx::TextArea textArea_TitleSet;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA_AMPSDIGIT_3_SIZE = 2;
    touchgfx::Unicode::UnicodeChar textArea_AmpsDigit_3Buffer[TEXTAREA_AMPSDIGIT_3_SIZE];
    static const uint16_t TEXTAREA_AMPSDIGIT_2_SIZE = 2;
    touchgfx::Unicode::UnicodeChar textArea_AmpsDigit_2Buffer[TEXTAREA_AMPSDIGIT_2_SIZE];
    static const uint16_t TEXTAREA_AMPSDIGIT_1_SIZE = 2;
    touchgfx::Unicode::UnicodeChar textArea_AmpsDigit_1Buffer[TEXTAREA_AMPSDIGIT_1_SIZE];
    static const uint16_t TEXTAREA_AMPSDIGIT_0_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textArea_AmpsDigit_0Buffer[TEXTAREA_AMPSDIGIT_0_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen_SetViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<Screen_SetViewBase, const touchgfx::AbstractButton&> radioButtonSelectedCallback;
    touchgfx::Callback<Screen_SetViewBase, const touchgfx::AbstractButton&> radioButtonDeselectedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src);
    void radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN_SETVIEWBASE_HPP
